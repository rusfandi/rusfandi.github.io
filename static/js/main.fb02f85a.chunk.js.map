{"version":3,"sources":["posts.js","Dashboard.js","authProvider.js","myAccount.js","schedule.js","transaction.js","checkTransaction.js","listPrice.js","feature.js","App.js","serviceWorker.js","index.js"],"names":["PostFilter","props","react_default","a","createElement","Filter","TextInput","label","source","alwaysOn","ReferenceInput","reference","allowEmpty","SelectInput","optionText","PostList","List","Object","assign","filters","posts_PostFilter","Responsive","small","SimpleList","primaryText","record","title","secondaryText","concat","views","tertiaryText","Date","published_at","toLocaleDateString","medium","Datagrid","TextField","ReferenceField","EditButton","PostTitle","_ref","PostEdit","Edit","posts_PostTitle","SimpleForm","DisabledInput","LongTextInput","Dashboard","Card_default","CardHeader_default","CardContent_default","authProvider","type","params","AUTH_LOGIN","username","localStorage","setItem","Promise","resolve","AUTH_LOGOUT","removeItem","AUTH_ERROR","status","reject","AUTH_CHECK","getItem","myAccountList","myAccountCreate","Create","scheduleList","transactionList","checkTransactionList","listPriceList","featureList","dataProvider","jsonServerProvider","App","Admin","dashboard","Resource","name","list","edit","icon","PostIcon","create","face","options","event","payment","redeem","add_shopping_cart","menu","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fb02f85a.chunk.js","sourcesContent":["// in src/posts.js\r\nimport React from \"react\";\r\nimport {\r\n  List,\r\n  Edit,\r\n  Datagrid,\r\n  ReferenceField,\r\n  TextField,\r\n  EditButton,\r\n  DisabledInput,\r\n  LongTextInput,\r\n  ReferenceInput,\r\n  SelectInput,\r\n  SimpleForm,\r\n  TextInput,\r\n  Filter,\r\n  SimpleList,\r\n  Responsive\r\n} from \"react-admin\";\r\nconst PostFilter = props => (\r\n  <Filter {...props}>\r\n    <TextInput label=\"Search\" source=\"q\" alwaysOn />\r\n    <ReferenceInput label=\"nama\" source=\"nama\" reference=\"myAccount\" allowEmpty>\r\n      <SelectInput optionText=\"name\" />\r\n    </ReferenceInput>\r\n  </Filter>\r\n);\r\n\r\nexport const PostList = props => (\r\n  <List {...props} filters={<PostFilter />}>\r\n    <Responsive\r\n      small={\r\n        <SimpleList\r\n          primaryText={record => record.title}\r\n          secondaryText={record => `${record.views} views`}\r\n          tertiaryText={record =>\r\n            new Date(record.published_at).toLocaleDateString()\r\n          }\r\n        />\r\n      }\r\n      medium={\r\n        <Datagrid>\r\n          <TextField source=\"id\" />\r\n          <ReferenceField\r\n            label=\"Nama\"\r\n            source=\"myAccountId\"\r\n            reference=\"myAccount\"\r\n          >\r\n            <TextField source=\"nama\" />\r\n          </ReferenceField>\r\n          {/* <TextField source=\"nama\" /> */}\r\n          <TextField source=\"handphone\" />\r\n          <TextField source=\"alamat\" />\r\n          <EditButton />\r\n        </Datagrid>\r\n      }\r\n    />\r\n  </List>\r\n);\r\nconst PostTitle = ({ record }) => {\r\n  return <span>Post {record ? `\"${record.title}\"` : \"\"}</span>;\r\n};\r\n\r\nexport const PostEdit = props => (\r\n  <Edit title={<PostTitle />} {...props}>\r\n    <SimpleForm>\r\n      <DisabledInput source=\"id\" />\r\n      <ReferenceInput label=\"nama\" source=\"nama\" reference=\"myAccount\">\r\n        <SelectInput optionText=\"name\" />\r\n      </ReferenceInput>\r\n      <DisabledInput source=\"nama\" />\r\n      <TextInput source=\"handphone\" />\r\n      <LongTextInput source=\"alamat\" />\r\n    </SimpleForm>\r\n  </Edit>\r\n);\r\n","// in src/Dashboard.js\r\nimport React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\n\r\nexport default () => (\r\n  <Card>\r\n    <CardHeader title=\"Welcome to the administration\" />\r\n    <CardContent>Lorem ipsum sic dolor amet...</CardContent>\r\n  </Card>\r\n);\r\n","// in src/authProvider.js\r\nimport { AUTH_LOGIN, AUTH_LOGOUT, AUTH_ERROR, AUTH_CHECK } from \"react-admin\";\r\n\r\nexport default (type, params) => {\r\n  // called when the user attempts to log in\r\n  if (type === AUTH_LOGIN) {\r\n    const { username } = params;\r\n    localStorage.setItem(\"username\", username);\r\n    // accept all username/password combinations\r\n    return Promise.resolve();\r\n  }\r\n  // called when the user clicks on the logout button\r\n  if (type === AUTH_LOGOUT) {\r\n    localStorage.removeItem(\"username\");\r\n    return Promise.resolve();\r\n  }\r\n  // called when the API returns an error\r\n  if (type === AUTH_ERROR) {\r\n    const { status } = params;\r\n    if (status === 401 || status === 403) {\r\n      localStorage.removeItem(\"username\");\r\n      return Promise.reject();\r\n    }\r\n    return Promise.resolve();\r\n  }\r\n  // called when the user navigates to a new location\r\n  if (type === AUTH_CHECK) {\r\n    return localStorage.getItem(\"username\")\r\n      ? Promise.resolve()\r\n      : Promise.reject();\r\n  }\r\n  return Promise.reject(\"Unknown method\");\r\n};\r\n","// in src/myAccount.js\r\nimport React from \"react\";\r\nimport {\r\n  List,\r\n  Datagrid,\r\n  TextField,\r\n  Create,\r\n  SimpleForm,\r\n  TextInput\r\n} from \"react-admin\";\r\n\r\nexport const myAccountList = props => (\r\n  <List {...props}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"nama\" />\r\n      <TextField source=\"handphone\" />\r\n      <TextField source=\"alamat\" />\r\n      <TextField source=\"rekening\" />\r\n    </Datagrid>\r\n  </List>\r\n);\r\nexport const myAccountCreate = props => (\r\n  <Create {...props}>\r\n    <SimpleForm>\r\n      <TextInput source=\"nama\" />\r\n      <TextInput source=\"handphone\" />\r\n      <TextInput source=\"alamat\" />\r\n      <TextInput source=\"rekening\" />\r\n    </SimpleForm>\r\n  </Create>\r\n);\r\n","// in src/schedule.js\r\nimport React from \"react\";\r\nimport { List, Datagrid, TextField } from \"react-admin\";\r\n\r\nexport const scheduleList = props => (\r\n  <List {...props}>\r\n    <Datagrid>\r\n      <TextField source=\"jadwal\" />\r\n      <TextField source=\"deskripsi\" />\r\n      <TextField source=\"tanggal\" />\r\n      <TextField source=\"tempat\" />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n","// in src/transaction.js\r\nimport React from \"react\";\r\nimport { List, Datagrid, TextField } from \"react-admin\";\r\n\r\nexport const transactionList = props => (\r\n  <List {...props}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"Jemput\" />\r\n      <TextField source=\"ProdukList\" />\r\n      <TextField source=\"Tambah_Keranjang\" />\r\n      <TextField source=\"Konfirmasi\" />\r\n      <TextField source=\"Detail_transaksi\" />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n","// in src/checkTransaction.js\r\nimport React from \"react\";\r\nimport { List, Datagrid, TextField } from \"react-admin\";\r\n\r\nexport const checkTransactionList = props => (\r\n  <List {...props}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"status\" />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n","// in src/listPrice.js\r\nimport React from \"react\";\r\nimport {\r\n  List,\r\n  Datagrid,\r\n  TextField\r\n  //   Create,\r\n  //   SimpleForm,\r\n  //   TextInput\r\n} from \"react-admin\";\r\n\r\nexport const listPriceList = props => (\r\n  <List {...props}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"produk\" />\r\n      <TextField source=\"harga\" />\r\n      <TextField source=\"satuan\" />\r\n      <TextField source=\"namaBankSampah\" />\r\n      <TextField source=\"updateTerakhir\" />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n// export const listPriceCreate = props => (\r\n//   <Create {...props}>\r\n//     <SimpleForm>\r\n//       <TextInput source=\"id\" />\r\n//       <TextInput source=\"produk\" />\r\n//       <TextInput source=\"harga\" />\r\n//       <TextInput source=\"satuan\" />\r\n//       <TextInput source=\"namaBankSampah\" />\r\n//       <TextInput source=\"updateTerakhir\" />\r\n//     </SimpleForm>\r\n//   </Create>\r\n// );\r\n","// in src/feature.js\r\nimport React from \"react\";\r\nimport {\r\n  List,\r\n  Datagrid,\r\n  TextField\r\n  //   TextInput,\r\n  //   Create,\r\n  //   SimpleForm\r\n} from \"react-admin\";\r\n\r\nexport const featureList = props => (\r\n  <List {...props}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"saldo\" />\r\n      <TextField source=\"topup\" />\r\n      <TextField source=\"t_bayar\" />\r\n      <TextField source=\"t_beli\" />\r\n      <TextField source=\"t_merchant\" />\r\n      <TextField source=\"t_warung\" />\r\n      <TextField source=\"t_jajan\" />\r\n      <TextField source=\"t_chat\" />\r\n      <TextField source=\"t_belajar\" />\r\n      <TextField source=\"t_games\" />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n// export const featureCreate = props => (\r\n//   <Create {...props}>\r\n//     <SimpleForm>\r\n//       <TextInput source=\"id\" />\r\n//       <TextInput source=\"saldo\" />\r\n//       <TextInput source=\"topup\" />\r\n//       <TextInput source=\"t_bayar\" />\r\n//       <TextInput source=\"t_beli\" />\r\n//       <TextInput source=\"t_merchant\" />\r\n//       <TextInput source=\"t_warung\" />\r\n//       <TextInput source=\"t_jajan\" />\r\n//       <TextInput source=\"t_chat\" />\r\n//       <TextInput source=\"t_belajar\" />\r\n//       <TextInput source=\"t_games\" />\r\n//     </SimpleForm>\r\n//   </Create>\r\n// );\r\n","// in src/App.js\nimport React from \"react\";\nimport { Admin, Resource } from \"react-admin\";\nimport jsonServerProvider from \"ra-data-json-server\";\nimport { PostList, PostEdit } from \"./posts\";\nimport PostIcon from \"@material-ui/icons/Book\";\nimport Dashboard from \"./Dashboard\";\nimport authProvider from \"./authProvider\";\nimport { myAccountList, myAccountCreate } from \"./myAccount\";\nimport face from \"@material-ui/icons/Face\";\nimport { scheduleList } from \"./schedule\";\nimport event from \"@material-ui/icons/Event\";\nimport { transactionList } from \"./transaction\";\nimport payment from \"@material-ui/icons/Payment\";\nimport { checkTransactionList } from \"./checkTransaction\";\nimport redeem from \"@material-ui/icons/Redeem\";\nimport { listPriceList } from \"./listPrice\";\nimport add_shopping_cart from \"@material-ui/icons/AddShoppingCart\";\nimport { featureList } from \"./feature\";\nimport menu from \"@material-ui/icons/Menu\";\n\nconst dataProvider = jsonServerProvider(\n  \"https://my-json-server.typicode.com/rusfandi/jsonserver\"\n);\n//\"http://localhost:3000\"\nconst App = () => (\n  <Admin\n    dashboard={Dashboard}\n    authProvider={authProvider}\n    dataProvider={dataProvider}\n  >\n    <Resource name=\"posts\" list={PostList} edit={PostEdit} icon={PostIcon} />\n    <Resource\n      name=\"myAccount\"\n      list={myAccountList}\n      create={myAccountCreate}\n      icon={face}\n      options={{ label: \"Akun\" }}\n    />\n    <Resource\n      name=\"schedule\"\n      list={scheduleList}\n      icon={event}\n      options={{ label: \"Jadwal\" }}\n    />\n    <Resource\n      name=\"transaction\"\n      list={transactionList}\n      icon={payment}\n      options={{ label: \"Transaksi\" }}\n    />\n    <Resource\n      name=\"checkTransaction\"\n      list={checkTransactionList}\n      icon={redeem}\n      options={{ label: \"CekTransaksi\" }}\n    />\n    <Resource\n      name=\"listPrice\"\n      list={listPriceList}\n      // create={listPriceCreate}\n      icon={add_shopping_cart}\n      options={{ label: \"Harga\" }}\n    />\n    <Resource\n      name=\"feature\"\n      list={featureList}\n      // create={featureCreate}\n      icon={menu}\n      options={{ label: \"Fitur\" }}\n    />\n  </Admin>\n);\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}